import { Request, Response } from "express";
import pool from "../config/database";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import crypto from "crypto";
import { sendEmail } from "../utils/sendEmail";


export const sendOtp = async (req: Request, res: Response): Promise<void> => {
  const { email } = req.body;

  try {
    const [users]: [any[], any] = await pool.execute("SELECT * FROM users WHERE email = ?", [email]);
    if (!users.length) {
      res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
      return;
    }

    const user = users[0];
    const currentTime = new Date();

    // N·∫øu OTP c≈© ƒë√£ h·∫øt h·∫°n, x√≥a OTP c≈©
    if (user.otp_expiry && new Date(user.otp_expiry) < currentTime) {
      await pool.execute("UPDATE users SET otp = NULL, otp_expiry = NULL WHERE email = ?", [email]);
    }

    // T·∫°o OTP m·ªõi
    const otp = crypto.randomInt(100000, 999999).toString();
    const hashedOtp = await bcrypt.hash(otp, 10);
    const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 ph√∫t

    // L∆∞u OTP m·ªõi v√†o c∆° s·ªü d·ªØ li·ªáu
    await pool.execute("UPDATE users SET otp = ?, otp_expiry = ? WHERE email = ?", [hashedOtp, expiresAt, email]);
    
    // G·ª≠i OTP m·ªõi cho ng∆∞·ªùi d√πng qua email
    await sendEmail(email, `M√£ OTP c·ªßa b·∫°n l√† ${otp}. H·∫øt h·∫°n sau 5 ph√∫t.`);

    res.status(200).json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i!" });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i OTP:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
};


export const changePassword = async (req: Request, res: Response): Promise<void> => {
  const { email, newPassword, otp } = req.body;

  try {
    // Ki·ªÉm tra xem email c√≥ t·ªìn t·∫°i trong c∆° s·ªü d·ªØ li·ªáu kh√¥ng
    const [users]: [any[], any] = await pool.execute("SELECT * FROM users WHERE email = ?", [email]);
    if (!users.length) {
      res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
      return;
    }

    const user = users[0];
    const currentTime = new Date();

    // Ki·ªÉm tra xem OTP c√≥ ƒë√∫ng v√† ch∆∞a h·∫øt h·∫°n kh√¥ng
    if (user.otp === null || new Date(user.otp_expiry) < currentTime) {
      res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
      return;
    }

    // So s√°nh OTP nh·∫≠p v√†o v·ªõi OTP ƒë√£ l∆∞u trong c∆° s·ªü d·ªØ li·ªáu (b·∫±ng bcrypt)
    const isOtpValid = await bcrypt.compare(otp, user.otp);
    if (!isOtpValid) {
      res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá!" });
      return;
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    await pool.execute("UPDATE users SET password = ?, otp = NULL, otp_expiry = NULL WHERE email = ?", [hashedPassword, email]);

    res.status(200).json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói khi thay ƒë·ªïi m·∫≠t kh·∫©u:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
};


export const register = async (req: Request, res: Response): Promise<void> => {
  try {
    const { full_name, email, password, role, phone } = req.body;

    // Ki·ªÉm tra n·∫øu thi·∫øu tr∆∞·ªùng
    if (!full_name || !email || !password || !role || !phone) {
      res.status(400).json({ error: "All fields are required" });
      return;
    }

    // Ki·ªÉm tra email tr√πng l·∫∑p
    const [rows] = await pool.execute("SELECT * FROM users WHERE email = ?", [email]);
    if (Array.isArray(rows) && rows.length > 0) {
      res.status(409).json({ error: "Email already exists" });
      return;
    }

    // Hash m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // Th√™m ng∆∞·ªùi d√πng v√†o c∆° s·ªü d·ªØ li·ªáu v·ªõi status m·∫∑c ƒë·ªãnh l√† 'active'
    await pool.execute(
      "INSERT INTO users (full_name, email, password, phone, role, status) VALUES (?, ?, ?, ?, ?, ?)",
      [full_name, email, hashedPassword, phone, role, 'active']
    );

    res.status(201).json({ message: "User registered successfully" });
  } catch (error) {
    console.error("Error during registration:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};


export const login = async (req: Request, res: Response): Promise<void> => {
  try {
    const { email, password } = req.body;

    console.log("üì• Y√™u c·∫ßu ƒëƒÉng nh·∫≠p:", { email }); // Log email ƒë∆∞·ª£c g·ª≠i l√™n

    const [users]: any = await pool.execute("SELECT * FROM users WHERE email = ?", [email]);
    if (!Array.isArray(users) || users.length === 0) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y email:", email);
      res.status(401).json({ error: "Email kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i!" });
      return;
    }

    const user = users[0];
    const isValid = await bcrypt.compare(password, user.password);
    if (!isValid) {
      console.log("‚ùå Sai m·∫≠t kh·∫©u cho email:", email);
      res.status(401).json({ error: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!" });
      return;
    }

    // üî• T·∫°o token
    const token = jwt.sign({ id: user.user_id, email: user.email }, process.env.JWT_SECRET || "secret", {
      expiresIn: "1h",
    });

    console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", { email, userId: user.user_id });

    // üîπ Tr·∫£ v·ªÅ c·∫£ `token` v√† `user`
    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: {
        id: user.user_id,
        full_name: user.full_name,
        email: user.email,
        role: user.role,
        phone: user.phone, // N·∫øu c√≥ tr∆∞·ªùng `phone`
      },
    });
  } catch (error) {
    console.error("üî• L·ªói trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p:", error);
    res.status(500).json({ error: "L·ªói m√°y ch·ªß n·ªôi b·ªô!" });
  }
};


export const getUser = async (req: Request, res: Response): Promise<void> => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      res.status(401).json({ error: "Unauthorized: No token provided" });
      return;
    }

    const token = authHeader.split(" ")[1];
    console.log("Token nh·∫≠n ƒë∆∞·ª£c:", token); // Ki·ªÉm tra token c√≥ ƒë√∫ng kh√¥ng

    const decoded: any = jwt.verify(token, process.env.JWT_SECRET || "secret");

    const [users]: any = await pool.execute(
      "SELECT user_id, full_name, email, phone, role, status, created_at FROM users WHERE user_id = ?",
      [decoded.id] // L·∫•y user_id t·ª´ token
    );


    if (!Array.isArray(users) || users.length === 0) {
      res.status(404).json({ error: "User not found" });
      return;
    }

    res.json(users[0]);
  } catch (error) {
    console.error("JWT Error:", error); // In l·ªói chi ti·∫øt
    res.status(500).json({ error: "Invalid token" });
  }
};